{"version":3,"sources":["Services/PhoneBookService.js","App.js","index.js"],"names":["baseUrl","axios","get","then","response","data","newContact","post","contact","put","id","delete","Notification","message","className","Numbers","persons","filter","handleDelete","person","name","toLowerCase","includes","map","number","onClick","Filter","handleChangeFilter","value","onChange","PersonForm","props","newName","handleChangeName","newNumber","handleChangeNumber","type","addContact","App","useState","setPersons","setNewName","setNewNumber","setFilter","setMessage","setClassName","useEffect","PhoneBookService","contacts","catch","error","console","log","timingNotification","setTimeout","event","target","preventDefault","duplicate","length","window","confirm","tempContact","concat","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a3020e5c.chunk.js","sourcesContent":["import axios from 'axios';\n\nconst baseUrl = '/api/persons'\n\nconst getAll = () =>{\n  return axios.get(baseUrl)\n  .then(response => response.data)\n}\n\nconst addData = (newContact) =>{\n  return axios.post(baseUrl,newContact)\n  .then(response => response.data)\n}\n\nconst editData = (contact) =>{\n  return axios.put(`${baseUrl}/${contact.id}`,contact)\n  .then(response => response.data)\n}\n\nconst deleteData = (contact) =>{\n  return axios.delete(`${baseUrl}/${contact.id}`,contact)\n}\n\nexport default {getAll,addData,editData,deleteData};\n","import { useState,useEffect } from \"react\";\nimport React from 'react';\nimport PhoneBookService from './Services/PhoneBookService'\n\nconst Notification = ({message,className}) =>{\n  if(message === ''){\n    return null\n  }else{\n    return(\n      <p className={className}>{message}</p>\n    )\n  }\n}\n\nconst Numbers = ({persons,filter,handleDelete})=>{\n  const filterResult = persons.filter(person => person.name.toLowerCase().includes(filter.toLowerCase()))\n\n  return (\n    filterResult.map(person => <p>{person.name} : {person.number} <button key = {person.id} onClick={() => handleDelete(person)}>delete</button></p>)\n  );\n}\n\nconst Filter = ({filter,handleChangeFilter}) =>{\n  return(\n    <div>\n      Filter : <input value={filter} onChange = {handleChangeFilter}/>\n    </div>\n  );\n}\n\nconst PersonForm = (props) =>{\n  return(\n    <form>\n      <div>\n        Name: <input value={props.newName} onChange = {props.handleChangeName}/>\n      </div>\n      <div>\n        Mobile Number: <input value={props.newNumber} onChange = {props.handleChangeNumber}/>\n      </div>\n      <div>\n        <button type=\"submit\" onClick={props.addContact}>add</button>\n      </div>\n    </form>\n  );\n}\nconst App = () => {\n  const [persons, setPersons] = useState([]) \n  const [newName, setNewName] = useState('')\n  const[newNumber, setNewNumber] = useState('')\n  const[filter, setFilter] = useState('')\n  const[message, setMessage] = useState('')\n  const[className,setClassName] = useState('completed')\n\n  useEffect(() =>{\n    PhoneBookService.getAll().then(contacts => setPersons(contacts)).catch(error => console.log('Failed to get Data'))\n  },[])\n\n  const timingNotification = ()=>{\n    setTimeout(() => {\n      setMessage('')\n      setClassName('completed')\n    }, 5000)\n  }\n\n  const addContact = (event)=>{\n    event.preventDefault()\n    let duplicate = persons.filter(person => person.name.toLowerCase() === newName.toLowerCase())\n    if(duplicate.length >= 1){\n      if(window.confirm(`${newName} is already in phonebook. Do you want to replace?`)){\n        PhoneBookService.editData({...duplicate[0],number:newNumber})\n        .then(newContact => {\n          let tempContact = [...persons]\n          tempContact = tempContact.map(contact => contact.id === newContact.id ? newContact : contact)\n          setPersons([...tempContact])\n          setNewName('')\n          setNewNumber('')\n          setMessage(`Replaced ${newContact.name} contact`)\n          timingNotification()\n        }).catch(error => {\n          setClassName('error')\n          setMessage(`Cannot replace contact.Try Again!!`)\n          timingNotification()\n        })\n      }else{\n        setMessage(`Cannot replace contact.Try Again!!`)\n        timingNotification()\n      }\n    }else{\n      PhoneBookService.addData({name:newName,number:newNumber})\n      .then(newContact => {\n        setPersons(persons.concat(newContact))\n        setNewName('')\n        setNewNumber('')\n        setMessage(`Added ${newContact.name} contact`)\n        timingNotification()\n      }).catch(error => {\n        setClassName('error')\n        setMessage(`Cannot add contact.Try Again!!`)\n        timingNotification()\n      })\n    }\n  }\n  const handleChangeName = (event)=>{\n    setNewName(event.target.value)\n  }\n\n  const handleChangeNumber = (event)=>{\n    setNewNumber(event.target.value)\n  }\n\n  const handleChangeFilter = (event)=>{\n    setFilter(event.target.value)\n  }\n\n  const handleDelete = (person) => {\n    if(window.confirm(`Are you sure want to delete ${person.name} contact?`)){\n      PhoneBookService.deleteData(person)\n         .then(() => {\n            let tempContact = persons.filter(contact => contact.id !== person.id)\n            setPersons(tempContact)\n            setNewName('')\n            setNewNumber('')\n            setMessage(`Deleted ${person.name} contact.`)\n            timingNotification()\n          }).catch(error => {\n            setClassName('error')\n            setMessage(`Cannot delete ${person.name} contact.Refresh and Try Again Else the app will misbehave!!`)\n            timingNotification()\n          })\n    }else{\n      return null\n    }\n  }\n\n  return (\n    <div>\n      <h2>Phonebook</h2>\n      <Notification message={message} className={className}/>\n      <Filter filter = {filter} handleChangeFilter = {handleChangeFilter}/>\n      <b>Add a New Number</b>\n      <PersonForm newName={newName} newNumber={newNumber} handleChangeName={handleChangeName} handleChangeNumber={handleChangeNumber} addContact={addContact}/>\n      <h2>Numbers</h2>\n      <Numbers persons = {persons} filter = {filter} handleDelete = {handleDelete}/>\n    </div>\n  )\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n"],"sourceRoot":""}